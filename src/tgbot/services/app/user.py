import http
from typing import (
    Any,
    Literal,
)

from aiogram import (
    types,
)
from aiogram.fsm.context import (
    FSMContext,
)
from aiogram.utils.i18n import (
    gettext as _,
)
from que_sdk import (
    QueClient,
    schemas,
)

from src.tgbot.config import (
    Config,
)
from src.tgbot.keyboards import (
    reply,
)
from src.tgbot.misc import (
    security,
)


def welcoming_message(
        message_type: Literal["welcome", "greet_auth_user", "deactivate_user"],
        **kwargs: Any,
) -> str:
    messages = {
        "welcome": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
        "greet_auth_user": "üëã –ü—Ä–∏–≤–µ—Ç {username} –≤—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
        "deactivate_user": ("üõë –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
                            "–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.\n"
                            "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reactivate."),
    }

    return messages[message_type].format(**kwargs)


async def get_user_data(client: QueClient, storage: dict[str, Any]) -> tuple[http.HTTPStatus, dict[str, Any]]:
    access_token = storage.get("access_token")
    status_code, response = await client.get_user_me(access_token)

    return status_code, response


async def handle_send_start_message(
        message: types.Message,
        response: dict[Any, Any]
) -> None:
    username = response.get("username") if response.get("username") is not None else message.from_user.username
    await message.answer(
        text=welcoming_message(message_type="greet_auth_user", username=username),
        reply_markup=reply.main_menu()
    )


async def handle_login_t_me(
        client: QueClient,
        config: Config,
        message: types.Message,
        state: FSMContext,
) -> tuple[http.HTTPStatus, dict[str, Any]] | None:
    auth_data = security.generate_signature(telegram_id=message.from_user.id, secret_key=config.misc.secret_key)
    status_code, response = await client.login_t_me(data_in=schemas.TMELoginSchema(**auth_data))
    if status_code == http.HTTPStatus.OK:
        access_token, refresh_toke = response.get('access_token'), response.get('refresh_token')

        await state.update_data({"access_token": access_token, "refresh_token": refresh_toke})

    return status_code, response


async def handle_signup(
        client: QueClient,
        message: types.Message,
        state: FSMContext,
        config: Config
) -> tuple[http.HTTPStatus, dict[str, Any]]:
    username = message.from_user.username
    status_code, response = await client.signup(
        data_in=schemas.SignUpSchema(
            username=username,
            telegram_id=message.from_user.id,
        )
    )

    await message.answer(
        text=welcoming_message(message_type="welcome", username=username),
        reply_markup=reply.main_menu()
    )
    await handle_login_t_me(client=client, state=state, config=config, message=message)

    return status_code, response


async def handle_not_founded_user(message: types.Message) -> None:
    text = _(
        "üîç –ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π "
        "–∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' –Ω–∏–∂–µ.\n–∏–ª–∏ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π "
        "–∞–∫–∫–∞—É–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å."

    )
    await message.answer(
        text=text,
        reply_markup=reply.login_signup_menu()
    )


async def handle_login(
        client: QueClient,
        state: FSMContext,
        message: types.Message,
        data: dict[str, Any]
) -> tuple[http.HTTPStatus, dict[str, Any]]:
    status_code, response = await client.login(
        data_in=schemas.LoginSchema(
            username=data.get("login"),
            password=data.get("password"),
            telegram_id=message.from_user.id
        )
    )
    if status_code == http.HTTPStatus.OK:
        access_token, refresh_toke = response.get('access_token'), response.get('refresh_token')
        await state.update_data({"access_token": access_token, "refresh_token": refresh_toke})
        await message.answer(
            text=_("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}").format(username=data.get("login")),
            reply_markup=reply.main_menu()
        )
    if status_code == http.HTTPStatus.UNAUTHORIZED:
        await message.answer(
            text=_(
                "üîê –û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ "
                "–≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        )
    return status_code, response
