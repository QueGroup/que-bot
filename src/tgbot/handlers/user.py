from typing import (
    Any,
)

from aiogram import (
    F,
    Router,
    types,
)
from aiogram.filters import (
    Command,
)
from aiogram.fsm.context import (
    FSMContext,
)
from que_sdk import (
    QueClient,
)

from src.tgbot.filters import (
    ChatTypeFilter,
)
from src.tgbot.keyboards import (
    inline,
    reply,
)

user_router = Router()
user_router.message.filter(
    ChatTypeFilter(chat_type=["private"])
)


@user_router.message(F.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
async def user_handler(message: types.Message, state: FSMContext, **middleware_data: Any) -> None:
    que_client: QueClient = middleware_data.get("que-client")
    storage = await state.get_data()
    status_code, response = await que_client.get_user_me(access_token=storage.get("access_token"))
    days = response.get("days_since_created")
    text = (
        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{username}*\n"
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: `{telegram_id}`\n\n"
        "–í—ã —Å –Ω–∞–º–∏ {days} –¥–Ω–µ–π"
    ).format(
        username=response.get("username"),
        telegram_id=response.get("telegram_id"),
        days=days
    )
    profile_created = bool(response.get("profile"))
    await state.update_data({"id": response.get("id")})
    await message.answer(text=text, reply_markup=inline.user_menu(is_profile=profile_created))


@user_router.message(F.text, Command("reactivate"))
async def user_activate_handler(message: types.Message, state: FSMContext, **middleware_data: Any) -> None:
    que_client: QueClient = middleware_data.get("que-client")
    storage = await state.get_data()
    access_token = storage.get("access_token")
    await que_client.reactivate_user(access_token=access_token)
    await message.delete()
    await message.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç", reply_markup=reply.main_menu())


# TODO: –ß—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –≤—ã–±–æ—Ä –º–µ–Ω—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π
#  –±—É–¥—É—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏: –í–æ–π—Ç–∏ –∏ –í–æ–π—Ç–∏ –ø–æ –ø–∞—Ä–æ–ª—é.
@user_router.callback_query(F.data == "user:signout")
async def user_signout_handler(call: types.CallbackQuery, state: FSMContext) -> None:
    text = (
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )

    await state.clear()
    await call.message.delete()
    await call.message.answer(text=text, reply_markup=types.ReplyKeyboardRemove())
