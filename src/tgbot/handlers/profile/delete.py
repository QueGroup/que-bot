from typing import (
    Any,
)

from aiogram import (
    F,
    Router,
    types,
)
from aiogram.filters import (
    StateFilter,
)
from aiogram.fsm.context import (
    FSMContext,
)
from que_sdk import (
    QueClient,
)

from src.tgbot.misc import (
    states,
)

delete_router = Router()


@delete_router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å")
async def delete_profile_handler(message: types.Message, state: FSMContext) -> None:
    storage = await state.get_data()
    username = storage.get("user").get("username")
    await message.answer(
        text=f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π username: `{username}`"
    )
    await state.set_state(states.DeleteProfileSG.confirmation)


@delete_router.message(F.text, StateFilter(states.DeleteProfileSG.confirmation))
async def confirmation_handler(message: types.Message, state: FSMContext, **middleware_data: Any) -> None:
    que_client: QueClient = middleware_data.get("que-client")
    storage = await state.get_data()
    username = storage.get("user").get("username")
    profile_id = storage.get("user").get("profile").get("id")
    access_token = storage.get("access_token")
    if message.text == username:
        # FIXME: –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è JSONDecodeError,
        #  —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∏–∫–∞–∫–æ–π json –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, —Ö–æ—Ç—è –≤–Ω—É—Ç—Ä–∏ –º—ã —Ç–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º response.json
        await que_client.delete_profile(profile_id=profile_id, access_token=access_token)
        await state.set_state(None)
    else:
        await message.answer(text="–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å–≤–æ–π username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
