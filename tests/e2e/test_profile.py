import asyncio

from aiogram import (
    types,
)
import pytest
from telethon import (
    functions,
)
from telethon.tl.custom import (
    Conversation,
)


@pytest.mark.anyio
async def test_create_profile(conv: Conversation) -> None:
    await conv.send_message("/start")
    start_resp: types.Message = await conv.get_response()
    await conv.send_message("üë§ –ê–∫–∫–∞—É–Ω—Ç")
    acc_resp: types.Message = await conv.get_response()
    button = acc_resp.buttons[0][0]
    button_data = button.data
    # https://github.com/LonamiWebs/Telethon/issues/326
    create_profile_task = asyncio.create_task(
        conv._client(functions.messages.GetBotCallbackAnswerRequest(
            peer=acc_resp.peer_id,
            msg_id=acc_resp.id,
            data=button_data
        ))
    )
    await asyncio.sleep(1)
    if not create_profile_task.done():
        pass

    await conv.send_message("–ë–æ—Ä–∏—Å")
    await asyncio.sleep(0.1)
    gender_resp: types.Message = await conv.get_response()
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–µ–Ω–¥–µ—Ä" in gender_resp.text
    await conv.send_message("‚ôÇ –ú—É–∂—Å–∫–æ–π")
    await asyncio.sleep(0.1)
    dob_prompt_resp: types.Message = await conv.get_response()
    assert "–≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è" in dob_prompt_resp.text
    calendar_resp: types.Message = await conv.get_response()
    calendar_year_task = asyncio.create_task(conv._client(functions.messages.GetBotCallbackAnswerRequest(
        peer=calendar_resp.peer_id,
        msg_id=calendar_resp.id,
        data=b"dialog_calendar:SET-YEAR:2004:-1:-1"
    )))
    await conv.send_message(".")  # TODO: –ë–µ–∑ —ç—Ç–æ–≥–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    await asyncio.sleep(0.25)

    calendar_month_task = asyncio.create_task(conv._client(functions.messages.GetBotCallbackAnswerRequest(
        peer=calendar_resp.peer_id,
        msg_id=calendar_resp.id,
        data=b"dialog_calendar:SET-MONTH:2004:1:-1"
    )))
    await conv.send_message(".")
    await asyncio.sleep(0.25)
    calendar_day_task = asyncio.create_task(conv._client(functions.messages.GetBotCallbackAnswerRequest(
        peer=calendar_resp.peer_id,
        msg_id=calendar_resp.id,
        data=b"dialog_calendar:SET-DAY:2004:1:1"
    )))
    await conv.send_message(".")
    await asyncio.sleep(0.25)
    city_prompt_resp: types.Message = await conv.get_response()
    assert "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" in city_prompt_resp.text
    await conv.send_message("–ü–µ–Ω–∑–∞")
    await asyncio.sleep(0.25)
    confirm_city_resp: types.Message = await conv.get_response()
    assert "–Ø –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å" in confirm_city_resp.text

    await conv.send_message("‚úÖ –î–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–æ!")
    await asyncio.sleep(0.25)
    about_me_prompt_resp: types.Message = await conv.get_response()
    assert "–Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ" in about_me_prompt_resp.text
    await conv.send_message("–û–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ")
    await asyncio.sleep(0.25)
    interested_in_prompt_resp: types.Message = await conv.get_response()
    assert "–∫–æ–≥–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–π—Ç–∏" in interested_in_prompt_resp.text
    await conv.send_message("‚ôÄ –î–µ–≤—É—à–∫—É")
    await asyncio.sleep(0.25)
    hobbies_prompt_resp: types.Message = await conv.get_response()
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–ª—è –≤–∞—Å –∑–∞–Ω—è—Ç–∏—è" in hobbies_prompt_resp.text
    await conv.send_message("–ß—Ç–µ–Ω–∏–µ")
    await asyncio.sleep(0.25)
    await conv.send_message("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")
    await asyncio.sleep(0.25)
    photo_prompt_resp: types.Message = await conv.get_response()

    photo_file_id = "https://t3.ftcdn.net/jpg/01/42/62/84/360_F_142628436_BdXXMV34Xf665lwSRmBbAVICjFXh7vG9.jpg"
    await conv.send_file(photo_file_id)
    confirmation_prompt_resp: types.Message = await conv.get_response()
    await asyncio.sleep(0.25)
    await conv.send_message("‚úÖ –î–∞ –≤—Å–µ —Ö–æ—Ä–æ—à–æ!")
    await asyncio.sleep(0.25)
    final_resp: types.Message = await conv.get_response()

    assert "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å" in final_resp.text


@pytest.mark.anyio
async def test_get_profile(conv: Conversation):
    await conv.send_message("/start")
    start_resp: types.Message = await conv.get_response()
    await conv.send_message("üë§ –ê–∫–∫–∞—É–Ω—Ç")
    acc_resp: types.Message = await conv.get_response()
    button = acc_resp.buttons[0][0]
    button_data = button.data
    create_profile_task = asyncio.create_task(
        conv._client(functions.messages.GetBotCallbackAnswerRequest(
            peer=acc_resp.peer_id,
            msg_id=acc_resp.id,
            data=button_data
        ))
    )
    await asyncio.sleep(1)
    if not create_profile_task.done():
        pass
    _: types.Message = await conv.get_response()
    profile_resp: types.Message = await conv.get_response()

    assert "–ò–º—è:" in profile_resp.text
    assert "–ü–æ–ª:" in profile_resp.text
    assert "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:" in profile_resp.text
    assert "–ì–æ—Ä–æ–¥:" in profile_resp.text
    assert "–û —Å–µ–±–µ:" in profile_resp.text
    assert "–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏:" in profile_resp.text
    assert "–•–æ–±–±–∏:" in profile_resp.text

    assert profile_resp.photo is not None, "–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
